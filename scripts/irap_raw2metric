#!/usr/bin/env Rscript
#; -*- mode: R;-*-
# =========================================================
# Copyright 2012-2018,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
# =========================================================

###############################################################
suppressPackageStartupMessages(library("optparse"))

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}
#
# specify our desired options in a list
#
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
pdebug.enabled <- TRUE
#######################
usage <- "irap_raw2metric --tsv file --lengths lengths.Rdata [options]"
filenames <- c("ifile","lengths")

option_list <- list(
  make_option(c("-f", "--feature"), type="character", dest="feature", default="gene",help="Feature (gene,transcript,exon)"),
  make_option(c("-m", "--metric"), type="character", dest="metric", default="rpkm", help="Normalization metric (rpkm/fpkm,tpm,fpkm-uq,uq-fpkm) [default %default]"),
  make_option(c("-i", "--ifile"), type="character", dest="ifile", help="TSV file name with the matrix with the counts per gene/transcript."),
  make_option(c("-g", "--gtf"), type="character", dest="gtf_file", default=NULL, help="GTF file name"),
  make_option(c("-l", "--lengths"), type="character",dest="lengths_file",default="",help=" [default %default]."),
  make_option(c("-e", "--exclude"), type="character",dest="toexclude",default="",help="biotypes to exclude (separated by comma) [default %default]. (deprecated)"),
  make_option(c("-r", "--round"), type="numeric",dest="roundto",default=2,help="Round values to 'round' decimal places [default %default]."),
  make_option(c("--length_as_tsv"), dest="lengths_tsv_format",action="store_true",default=FALSE,help="lengths are provided in a two column TSV file with the feature and length [default %default]."),
  make_option(c("m","--mass_biotypes"),type="character",dest="mass_biotypes",default=NULL,help="Sequence of biotypes, separated by comma, that define the set of genes that are used to compute the total number of reads (rpkm/fpkm/tpm) [default all genes]"),
  make_option(c("--mtx"), action="store_true",default=FALSE,dest="is_mtx",help="The input file is in Matrix Market format. Default is TSV format."),
  make_option(c("--tsv"), action="store_false",default=FALSE,dest="is_mtx",help="The input file is in TSV format (default)."),
  make_option(c("--exit_on_error"),action="store_true",dest="exit.on.error",default=FALSE,help="Exit when an inconsistency is found between the expression matrix and the file with the lengths. by default it will emit an warning and try to continue."),
  make_option(c("--debug"),action="store_true",dest="debug",default=FALSE,help="Debug mode"),
  make_option(c("-o", "--out"), type="character",default=NULL,help="Output file name prefix. An TSV file (<out>.tsv) will be created. Alternatively, if --mtx option is provided, <out>.mtx.gz will be created.")
)

## TODO: this variable is shared between irap_raw2metric and irap_quant_qc -> move to another file
# check multiple options values
multiple.options = list(
  feature=c('gene','exon','transcript'),
  metric=c('rpkm','tpm','fpkm','fpkm-uq','uq-fpkm')
  )
mandatory <- c("ifile","out","lengths_file")

#pinfo("saved")
opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory)

# ensure that the path include / in the end
opt$browser <- paste(gsub("/$","",opt$browser),"/",sep="")
pdebug.enabled <- opt$debug

#
pdebug.save.state("irap_raw2metric","p0")
lengths <- list()
gene.length <- NULL
trans.length <- NULL
exon.length <- NULL
# load TSV

##

if ( ! is.null(opt$mass_biotypes) && is.null(opt$gtf_file) ) {
    perror("--gtf option is required when using --mass_biotypes")
    q(status=1)
}

if ( opt$roundto<0 ||  is.null(opt$roundto)) {
    perror("--round value should be an integer greater or equal to 0 (",opt$roundto,")")
    q(status=1)
}
opt$roundto <- round(opt$roundto,0)

pinfo("Loading ",opt$ifile)
if ( opt$is_mtx ) {
    table <- mtx.load(opt$ifile)
} else {
    table <- quant.load(opt$ifile)
}
pinfo("Loading ",opt$ifile," done.")

# matrix may contain a single column with values
if ( is.vector(table) ) {
    names(table) <- ids
    #cat("ERROR: ",opt$ifile," should contain a matrix\n")
    #q(status=1)
}

# Gene lib1 ....
if ( ! opt$lengths_tsv_format ) {
    ## load lengths
    pinfo("Loading ",opt$lengths_file)
    load(opt$lengths_file)   
    if ( opt$feature=="gene" && ! exists("gene.length")) {
        perror("Unable to get the length of genes from ",opt$lengths_file)
        q(status=1)
    }
    if ( opt$feature=="exon" && ! exists("exon.length")) {
        perror("Unable to get the length of exons from ",opt$lengths_file)
        q(status=1)
    }
    pinfo("Loading ",opt$lengths_file," done.")
}
if ( opt$lengths_tsv_format ) {
    ## TSV format
    pinfo("Loading ",opt$lengths_file, " (tsv format)")
    lens.df <- read.table(opt$lengths_file,sep="\t",header=F,comment.char="",quote="")
    lengths <- list()
    lens <- lens.df[,2]
    names(lens) <- lens.df[,1]
    if (opt$feature=="gene") {
        gene.length <-  lens
    } else {
        if (opt$feature=="exon") {
            exon.length <- lens
        } else {
            trans.length <- lens
        }
    }
    pinfo("Loading ",opt$lengths_file," done.")
}
pdebug("data loaded")

# load gtf if provided
gtf.table <- NULL
mass.labels <- NULL
feature.label <- paste(opt$feature,"_id",sep="")
if (!is.null(opt$gtf_file) ) {
  gtf.table <- load.gtf(opt$gtf_file,feature=opt$feature,selected.attr=c(feature.label,"biotype"))
  pinfo("GTF file loaded: ",opt$gtf," ",nrow(gtf.table)," entries")

  if ( ! is.null(opt$mass_biotypes) ) {
      ss <- strsplit(opt$mass_biotypes,split=",")[[1]]
      in.gtf <- as.character(unique(gtf.table$biotype))
      found.ss <- ss[ss%in%in.gtf]
      if (length(found.ss) == 0 ) {
          perror("Unable to find biotype(s) (",opt$mass_biotypes,") in ",opt$gtf_file)
          q(status=1)
      }
      pinfo("Found ",paste(found.ss,sep=","))
      #gtf.table$biotype=="protein_coding"
      mass.labels <- as.character(gtf.table[gtf.table$biotype%in%found.ss,feature.label])      
      pinfo("#Features used to compute the mass:",length(mass.labels))
  }
}

if (opt$feature=="exon" ) {
  #eids <- paste(exon.length$gene_id,exon.length$exon_number,sep=".")
    if ( sum( "exon_id" %in% colnames(exon.length)) > 0 ) {
        eids <- as.character(exon.length$exon_id)
    } else { 	     
        ## backward compatibility
        ## eids <- paste(exon.length$gene_id,exon.length$exon_number,sep=".")
        perror("exon_id not found in lengths file...file generated in a version of irap < 0.9.0?")
        q(status=2)        
    }
    exon.length <- exon.length[,"elength"]
    names(exon.length) <- eids
    mass.labels <- mass.labels[mass.labels%in%eids]
}

lengths <- list(gene=gene.length,transcript=trans.length,exon=exon.length)
###################################################
## Ensembl workarounds
## sometime after version 80 Ensembl decided to use transcript ids
## in the cdna file different from the transcripts ids found in the GTF!?
if ( opt$feature=="transcript" && sum(grepl(".",rownames(table),fixed=TRUE))==nrow(table) && sum(grepl(".",names(trans.length),fixed=TRUE))==0 ) {
    pinfo("Applying Ensembl workaround...")
    rownames(table) <- gsub("\\.[0-9]+","",rownames(table))
    if (!is.null(mass.labels)) {
        mass.labels <- gsub("\\.[0-9]+","",mass.labels)
    }
    print(head(table))
}
## Missing features in the GTF
if (!opt$exit.on.error) {
    ## check if there are features without length info
    lens <- lengths[[opt$feature]]
    missing.feat <- (!rownames(table) %in% names(lens))
    if (sum(missing.feat)>0 ) {
        pwarning("Length information not found for ",sum(missing.feat)," features")
        print(head(rownames(table)[missing.feat]))
        table <- table[!missing.feat,,drop=FALSE]
    }
}
#print(str(lengths))
pdebug.save.state("irap_raw2metric","p1")
if ( opt$metric == "rpkm" || opt$metric=="fpkm" ) {
  #(read count  * 1,000,000) / (total number of reads * kilobase of gene/transcript/exon)
    rpkm <- countstable2rpkms(table,lengths[[opt$feature]],mass.labels,round=opt$roundto)
    if ( is.vector(rpkm) ) {
        rpkm <- data.frame(cbind(names(rpkm),rpkm),check.names=F)
        colnames(rpkm) <- append(capitalize(opt$feature),"Lib")
    } 
    
    ## save
    if ( opt$is_mtx ) {
        ##
        filename <- write.mtx(rpkm,filename=gsub(".gz$","",opt$out),gzip=TRUE)
    } else {
        write.tsv(rpkm,file=opt$out,rownames.label="Feature")
        filename <- opt$out
    }
    pinfo("Saved ",filename)      
    q(status=0)
}

if ( opt$metric == "uq-fpkm" || opt$metric=="fpkm-uq" ) {
  # uq-fpkm=UQ(fpkm)
  # fpkm-uq= as described in the PCAWG-3 publication with the difference is that no constraint is imposed on the set of genes used
    if ( opt$metric == "uq-fpkm" ) {
        TUQ=TRUE
        UQ=FALSE 
    } else {
        TUQ=FALSE
        UQ=TRUE 
    }
    norm.vals <- countstable2rpkms(table,lengths[[opt$feature]],mass.labels,UQ=UQ,TUQ=TUQ,round=opt$roundto)
    if ( is.vector(norm) ) {
        norm.vals <- data.frame(cbind(names(norm.vals),norm.vals),check.names=F)
        colnames(norm.vals) <- append(capitalize(opt$feature),"Lib")
    } 
    ## save
    if ( opt$is_mtx ) {
        ##
        filename <- write.mtx(norm.vals,filename=gsub(".gz$","",opt$out),gzip=TRUE)
    } else {
        write.tsv(norm.vals,file=opt$out,rownames.label="Gene")
        filename <- opt$out
    }
    pinfo("Saved ",filename)  
    q(status=0)
}


if ( opt$metric == "tpm" ) {
    tpm <- countstable2tpm(table,lengths[[opt$feature]],mass.labels=mass.labels,round=opt$roundto)
    if ( is.vector(tpm) ) {
        tpm <- data.frame(cbind(names(tpm),tpm),check.names=F)
        colnames(tpm) <- append(capitalize(opt$feature),"Lib")
    }     
    ## save
    if ( opt$is_mtx ) {
        ##
      filename <- write.mtx(tpm,filename=gsub(".gz$","",opt$out),gzip=TRUE)
    } else {
        write.tsv(tpm,file=opt$out,rownames.label="Feature")
        filename <- opt$out
    }
    pinfo("Saved ",filename)      
    q(status=0)
}

q(status=0)


