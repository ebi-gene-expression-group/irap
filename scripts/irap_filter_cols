#!/usr/bin/env Rscript
# =========================================================
#
# Copyright 2012-2018,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
# =========================================================
suppressPackageStartupMessages(library("optparse"))

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))

debug.enabled <- TRUE
#######################
usage <- "irap_filter_cols --ifile file --qc file --out out_file_prefix [options]"
filenames <- c("ifile","qfile")
option_list <- list(
    make_option(c("-i", "--ifile"), type="character", dest="ifile", help="File name with the matrix with the counts per cell by gene/transcript."),
    make_option(c("--mtx"), action="store_true",default=FALSE,dest="is_mtx",help="The input file is in Matrix Market format. Default is TSV format."),
    make_option(c("--tsv"), action="store_false",default=FALSE,dest="is_mtx",help="The input file is in Matrix Market format. Default is TSV format."),
    make_option(c("-q", "--qc"), type="character", dest="qfile", help="TSV file name with the matrix with the QC per  column"),
    make_option(c("-o", "--out"), dest="ofile", type="character",default=NULL,help="Output file name prefix."),
    make_option(c("--debug"),action="store_true",dest="debug",default=FALSE,help="Debug mode")
)

multiple.options <- NULL
mandatory <- c("ifile","qfile","ofile")

opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory)

mat.file <- opt$ifile
qc.file <- opt$qfile
out.file <- opt$ofile


library(data.table)
#
pinfo("Loading ",qc.file)
qc.table <- qload.tsv(qc.file,header=TRUE)
pinfo("Loading ",qc.file," done.")

## First column should contain the cells/sample names
## last column (overall) should contain the PASS/FAIL call
col.names <- as.character(qc.table[,1])
## quick checks
if ( anyDuplicated(col.names)>0 ) {
    perror("Found duplicated entries in the first column of ",qc.file)
    q(status=1)
}

last.col <- colnames(qc.table)[ncol(qc.table)]
if ( last.col!="Overall" ) {
    perror("Overall column is not the last column in ",qc.file)
    q(status=1)    
}
#last.col
outcome <- qc.table[,last.col]
names(outcome) <- col.names
print(table(outcome))

failed <- outcome=="FAIL"
pinfo("Removing ",sum(failed), " cells/samples from ",mat.file)

if (sum(failed)==length(failed) ) {
    pwarning("All cells/samples excluded")
##    q(status=1)
}

if (sum(failed)==0 && ! opt$is_mtx ) {    
    ## speedup - just copy
    pinfo("No changes to input matrix...copying it")
    cmd <- paste0("cp ",mat.file," ", out.file)
    pinfo("Running ",cmd)
    system(cmd)
    q(status=0)
}

if ( ! opt$is_mtx ) {
## this may be optimized in the future
    cols <- colnames(qload.tsv(mat.file,header=TRUE,nrows=1))
    both <- intersect(cols[-1],col.names)
    if ( length(both)!=length(col.names) ) {
        perror("Mismatch in the cell/sample names between the two input samples")
        q(status=1)
    }
    ##
    drop <- which(cols%in%names(failed[failed]))
    if (length(drop) <= 1000 ) {
        cmd <- paste0("cut --complement --fields ",paste(drop,sep=",",collapse=",")," ",mat.file," > ",out.file)
        pinfo("Running ",cmd)
        system(cmd)
    } else {
        pinfo("Loading matrix...")
        x <- qload.tsv(mat.file,header=TRUE,drop=drop)
        pinfo("Loading matrix...done")
        write.tsv(x,out.file,header=TRUE,gzip=FALSE,fix=FALSE)
        pinfo("Saved ",out.file)
    }
} else {
    ## mtx
    ## load the tsv/sparse matrix
    pinfo("Loading mtx ",opt$ifile)
    table <- mtx.load(opt$ifile)
    cols <- colnames(table)
    both <- intersect(cols,col.names)
    keep <- which(!cols%in%names(failed[failed]))
    table <- table[,keep,drop=FALSE]
    write.mtx(table,filename=opt$ofile,gzip=TRUE)
    
}
pinfo("Filtering complete.")
q(status=0)
