#!/usr/bin/env Rscript
#; -*- mode: R;-*-
# =========================================================
# Copyright 2012-2018,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
# =========================================================

###############################################################
suppressPackageStartupMessages(library("optparse"))

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}
#
# specify our desired options in a list
#
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
pdebug.enabled <- TRUE
#######################
usage <- "irap_cell_qc --tsv file --out out_file_prefix [options]"
filenames <- c("ifile","controls_file")

## 
option_list <- list(
    make_option(c("-i", "--in"), type="character", dest="ifile", help="TSV/MTX file name with the matrix with the counts per cell by gene/transcript."),
    make_option(c("--mtx"), action="store_true",default=FALSE,dest="is_mtx",help="The input file is in Matrix Market format. Default is TSV format."),
    make_option(c("--tsv"), action="store_false",default=FALSE,dest="is_mtx",help="The input file is in Matrix Market format. Default is TSV format."),
    make_option(c("-c", "--blacklist"), type="character", default=NULL,dest="blacklist_file", help="File with a known list of cells that should be discarded."),
    make_option(c("-o", "--out"), type="character",default=NULL,help="Output file name prefix."),
    make_option(c("-f", "--min_features"), type="numeric",default=5,help="Minimum number of features expressed. (as a percentage of the total number of features - [0,100])"),
    make_option(c("-m", "--min_counts"), type="numeric",default=1000,dest="min_counts",help="Minimum number of counts per cell."),
    make_option(c("-g", "--max_ERCC"), type="numeric",default=70,help="Maximum percentage of expression ([0-100]) that may be assigned to ERCC spkeins. 0 disables the filter. [default %default]."),
    make_option(c("-e", "--filt_outliers"), action="store_true",default=FALSE,dest="outliers",help="Detect outliers based on the median absolute difference (like scater)."),
    make_option(c("-M", "--filt_outliers_mad"), type="numeric",default=5,dest="mad",help="Median absolute deviation used to determine the outilers (default %default)."),
    make_option(c("-n", "--min_expression"), type="numeric",default=1,help="the minium expression level to consider a feature expressed."),
    make_option(c("--debug"),action="store_true",dest="debug",default=FALSE,help="Debug mode")
)



multiple.options <- NULL
mandatory <- c("ifile","out")

#pinfo("saved")
opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory)

pdebug.enabled <- opt$debug

#
pdebug.save.state("irap_cell_qc","p0")
library(Matrix)

if ( opt$min_features<0 || opt$min_features>100 ) {
    perror("--min_feature value should be in the range of [0,100]")
    quit(status=1)
}

if ( opt$max_ERCC<0 || opt$max_ERCC>100 ) {
    perror("--max_ERCC value should be in the range of [0,100]")
    quit(status=1)
}

if ( opt$min_expression<0 ) {
    perror("--min_expression value should be equal or greater than 0")
    quit(status=1)
}
if ( opt$min_counts<0 ) {
    perror("--min_counts value should be equal or greater than 0")
    quit(status=1)
}
##
pinfo("Loading ",opt$ifile)
##
if ( opt$is_mtx ) {
    table <- mtx.load(opt$ifile)
} else {
    table1 <- as.matrix(quant.load(opt$ifile))
    ## convert to sparse matrix
    table <- Matrix(data=table1)
    table1 <- NULL
}
if (is.null(table)) {
    perror("Error loading ",opt$ifile)
    q(status=1)
}
pinfo("Loading ",opt$ifile," done.")


pdebug.save.state("irap_cell_qc","p1")


suppressPackageStartupMessages(library(scater))

##
ercc.feat <- grep("ERCC-*",rownames(table),ignore.case=TRUE,value=TRUE)

## include MT genes too?
if (length(ercc.feat)>0 ) {
    pinfo("Found ",length(ercc.feat)," ERCC genes")
    if ( sum(Matrix::rowSums(table[ercc.feat,,drop=FALSE],na.rm=T)>0) == 0 ) {
        pinfo("ERCC without expression, ignoring it for QC")
        ercc.feat <- NULL
    }
}
## QC
pinfo("Calculating QC metrics...")
lowerDetectionLimit <- opt$min_expression
message("Minimum (feature) expression: ",lowerDetectionLimit)
expressed <- table>=lowerDetectionLimit
## a gene should be expressed in more than 1 cell/sample
cut.off <- 1
genes.expressed <- Matrix::rowSums(expressed,na.rm=TRUE)>cut.off
genes.expressed <- names(genes.expressed[genes.expressed])
message("Genes expressed ( in at least ",cut.off," cells/samples): ",length(genes.expressed))
## genes with some expression
pinfo("Filtering matrix to include only expressed genes...")
expressed.filt <- expressed[genes.expressed,,drop=FALSE]
pinfo("Filtering matrix to include only expressed genes...done.")

pinfo("Features expressed per cell - minimum number of features:",opt$min_features)
perc.feat.expressed <- round(Matrix::colSums(expressed.filt)*100.0/nrow(expressed.filt),0)
perc.feat.expressed.status <- perc.feat.expressed
perc.feat.expressed.status[perc.feat.expressed>=opt$min_features] <- "PASS"
perc.feat.expressed.status[perc.feat.expressed<opt$min_features] <- "FAIL"
print(summary(perc.feat.expressed))

tot.expr <- Matrix::colSums(table[genes.expressed,,drop=FALSE],na.rm=TRUE)

## ERCCs
if ( ! is.null(ercc.feat) && opt$max_ERCC>0 ) {
    pinfo("Percentage of expression of control genes - max. % expression per cell:",opt$max_ERCC)
    tot.ercc.expr <- Matrix::colSums(table[ercc.feat,,drop=FALSE],na.rm=TRUE)
    pct.ercc.expr <- round(tot.ercc.expr/tot.expr*100,0)
    print(summary(pct.ercc.expr))
    max.ercc.status <- pct.ercc.expr
    max.ercc.status[max.ercc.status>opt$max_ERCC] <- "FAIL"
    max.ercc.status[max.ercc.status!="FAIL"] <- "PASS"
} else {
    pct.ercc.expr <- rep(0,length(tot.expr))
    tot.ercc.expr <- rep(0,length(tot.expr))
    max.ercc.status <- rep("PASS",length(tot.expr))
}

pinfo("Excluding cells in blacklist:",opt$blacklist_file)
control.status <- rep("PASS",length(tot.expr))

## blacklisted
if (!is.null(opt$blacklist_file) ) {
    x <- as.character(read.table(blacklist_file,header=FALSE,col.names=c("Cells"))[,1])  
    control.status[control.status%in%x] <- "FAIL"
    x <- NULL
} 


## outliers

if ( opt$outliers) {
    pinfo("Outliers - nmads=",opt$mad)
    outlier <- isOutlier(tot.expr, nmads = opt$mad)
    outlier.status <- outlier
    outlier.status[outlier] <- "FAIL"
    outlier.status[!outlier] <- "PASS"
} else {
    pinfo("Outliers - disabled")
    outlier <- rep("PASS",times=length(tot.expr))
    names(outlier) <- names(tot.expr)
    outlier.status <- outlier
    outlier.status[names(outlier.status)] <- "PASS"
}


## total number of expression
pinfo("Total expression per cell - min. counts: ",opt$min_counts)
min.counts.status <- tot.expr
min.counts.status[min.counts.status<=opt$min_counts]<- "FAIL"
min.counts.status[min.counts.status!="FAIL"] <- "PASS"
print(summary(tot.expr))

pinfo("Preparing summary table")
## generate a single matrix
df <- data.frame(list(controls=control.status,
                      outlier=outlier.status,
                      ercc=max.ercc.status,
                      total.expr=min.counts.status,
                      expr.feat=perc.feat.expressed.status))
df <- cbind(Cells=rownames(df),df)
overall <- rowSums(df=="FAIL")>0
overall[overall] <- "FAIL"
overall[overall!="FAIL"] <- "PASS"
df <- cbind(df,Overall=overall)

num.pass <- sum(df$Overall=="PASS")
num.failed <- sum(df$Overall!="PASS")
p.passed <- round(num.pass/nrow(df)*100,2)
pinfo("Passing QC=",p.passed," % cells")
if (num.failed>0) {
    det <- unlist(apply(df[,-1],MARGIN=2,FUN=table))
    det <- det[grepl("FAIL",names(det))]
    names(det) <- gsub(".FAIL","",names(det))
    pinfo("Cells not passing QC")
    print(det)
}

pinfo("Saving to ",opt$out)
## opt$is_mtx 
write.tsv(df,file=opt$out,header=T)

## save a few summary stats
# # cells, #cells passing QC, #cells failed QC, %cells passed QC, # cells that failed QC for each criteria
x <- c(nrow(df),num.pass,num.failed,p.passed)
names(x) <-c("#Cells","# passed QC","# failed QC","% passed QC")
det <- rowSums(apply(df[,-1],MARGIN=1,FUN=grepl,pattern="FAIL"))
names(det) <- paste(colnames(df)[-1]," filter",sep="")

sum.stats <- c(x,det[-length(det)])
sum.stats.m <- sum.stats
dim(sum.stats.m) <- c(1,length(sum.stats))
colnames(sum.stats.m) <- names(sum.stats)
ofile2 <- paste0(opt$out,".summary.tsv")
pinfo("Saving ",ofile2)
write.tsv(sum.stats.m,file=ofile2,header=T)
## detailed stats at cell level
sum.stats.m <- NULL


ofile2 <- paste0(opt$out,".stats.tsv")
x <- list(
    "Cells/Samples"=colnames(table),
    "Tot.Expr"=tot.expr,
    "Tot.Ctr.expr"=tot.ercc.expr,
    "Pct.Ctr.expr"=pct.ercc.expr,
    "Pct.Feat.expr"=perc.feat.expressed,
    "Expr.outlier"=outlier,
    "Status"=df$Overall)
pinfo("Saving ",ofile2)
write.tsv(data.frame(x),file=ofile2,header=T)

pdebug.save.state("irap_cell_qc","pf")
q(status=0)

## debug
load("irap_cell_qc.Rdata")
library(scater)
max.ercc <- pData(sceset)$pct_exprs_feature_controls_ERCC/100
max(pData(sceset)$pct_exprs_feature_controls_ERCC/100)
